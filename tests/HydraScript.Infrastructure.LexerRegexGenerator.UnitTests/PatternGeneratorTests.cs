using System.Diagnostics;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using NSubstitute;
using Xunit;
using Xunit.Abstractions;

namespace HydraScript.Infrastructure.LexerRegexGenerator.UnitTests;

public class PatternGeneratorTests(ITestOutputHelper output)
{
    [Fact]
    public void Initialize_PatternContainerMarked_CorrectlyGenerated()
    {
        var provider = Substitute.For<ITokenTypesStreamProvider>();
        provider.TokenTypesStream.Returns(
        [
            new(Tag: "Test2", Pattern: "test2", Priority: 2),
            new(Tag: "Test1", Pattern: "test1", Priority: 1)
        ]);
        var generator = new PatternGenerator
        {
            Provider = provider
        };
        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);

        driver = driver.RunGeneratorsAndUpdateCompilation(CreateCompilation(string.Empty), out var outputCompilation,
            out var diagnostics);
        Debug.Assert(diagnostics.IsEmpty);
        Debug.Assert(outputCompilation.SyntaxTrees.Count() == 2);

        var runResult = driver.GetRunResult();

        var generatedFileSyntax = runResult.GeneratedTrees
            .Single(t => t.FilePath.EndsWith("PatternContainer.g.cs"));

        const string expectedSource = 
""""
// <auto-generated/>

using System.Diagnostics.CodeAnalysis;

namespace HydraScript.Infrastructure;

internal partial class PatternContainer
{
    [StringSyntax(StringSyntaxAttribute.Regex)]
    public const string Value = """(?<Test1>test1)|(?<Test2>test2)|(?<ERROR>\S+)""";
}

"""";

        output.WriteLine(generatedFileSyntax.GetText().ToString());
        Assert.Equal(
            expectedSource,
            generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    private static CSharpCompilation CreateCompilation(string source) =>
        CSharpCompilation.Create("compilation",
            [CSharpSyntaxTree.ParseText(source)],
            [MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location)],
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));
}