using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace HydraScript.Infrastructure.LexerRegexGenerator;

[Generator]
public partial class PatternGenerator : IIncrementalGenerator
{
    public ITokenTypesJsonStringProvider Provider { get; init; } = new DefaultTokenTypesJsonStringProvider();

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var tokenTypes = JsonSerializer.Deserialize(
                Provider.TokenTypesJsonString,
                PatternGeneratorContext.Default.IEnumerableTokenType)!
            .OrderBy(x => x.Priority)
            .Concat([new TokenType("ERROR", @"\S+", int.MaxValue)]);
        var pattern = string.Join('|', tokenTypes.Select(t => t.GetNamedRegex()));

        var code = $@"// <auto-generated/>

using System.Diagnostics.CodeAnalysis;

namespace HydraScript.Infrastructure;

internal partial class PatternContainer
{{
    [StringSyntax(StringSyntaxAttribute.Regex)]
    public const string Value = """"""{pattern}"""""";
}}
";

        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "PatternContainer.g.cs",
            SourceText.From(code, Encoding.UTF8)));
    }
}